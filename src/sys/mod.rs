/* automatically generated by rust-bindgen */

pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulong;
pub type int_least8_t = ::libc::c_char;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_long;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulong;
pub type int_fast8_t = ::libc::c_char;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intptr_t = ::libc::c_long;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub type __gwchar_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type imaxdiv_t = Struct_Unnamed1;
pub type wlc_handle = uintptr_t;
pub type size_t = ::libc::c_ulong;
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_char; 13usize],
}
impl ::std::clone::Clone for Struct___locale_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_wlc_origin {
    pub x: int32_t,
    pub y: int32_t,
}
impl ::std::clone::Clone for Struct_wlc_origin {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_wlc_origin {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_wlc_size {
    pub w: uint32_t,
    pub h: uint32_t,
}
impl ::std::clone::Clone for Struct_wlc_size {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_wlc_size {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_wlc_geometry {
    pub origin: Struct_wlc_origin,
    pub size: Struct_wlc_size,
}
impl ::std::clone::Clone for Struct_wlc_geometry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_wlc_geometry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_wlc_event_source { }
pub enum Struct_xkb_state { }
pub enum Struct_xkb_keymap { }
pub enum Struct_libinput_device { }
pub type Enum_wlc_log_type = ::libc::c_uint;
pub const WLC_LOG_INFO: ::libc::c_uint = 0;
pub const WLC_LOG_WARN: ::libc::c_uint = 1;
pub const WLC_LOG_ERROR: ::libc::c_uint = 2;
pub const WLC_LOG_WAYLAND: ::libc::c_uint = 3;
pub type Enum_wlc_backend_type = ::libc::c_uint;
pub const WLC_BACKEND_NONE: ::libc::c_uint = 0;
pub const WLC_BACKEND_DRM: ::libc::c_uint = 1;
pub const WLC_BACKEND_X11: ::libc::c_uint = 2;
pub type Enum_wlc_event_bit = ::libc::c_uint;
pub const WLC_EVENT_READABLE: ::libc::c_uint = 1;
pub const WLC_EVENT_WRITABLE: ::libc::c_uint = 2;
pub const WLC_EVENT_HANGUP: ::libc::c_uint = 4;
pub const WLC_EVENT_ERROR: ::libc::c_uint = 8;
pub type Enum_wlc_connector_type = ::libc::c_uint;
pub const WLC_CONNECTOR_WLC: ::libc::c_uint = 0;
pub const WLC_CONNECTOR_UNKNOWN: ::libc::c_uint = 1;
pub const WLC_CONNECTOR_VGA: ::libc::c_uint = 2;
pub const WLC_CONNECTOR_DVII: ::libc::c_uint = 3;
pub const WLC_CONNECTOR_DVID: ::libc::c_uint = 4;
pub const WLC_CONNECTOR_DVIA: ::libc::c_uint = 5;
pub const WLC_CONNECTOR_COMPOSITE: ::libc::c_uint = 6;
pub const WLC_CONNECTOR_SVIDEO: ::libc::c_uint = 7;
pub const WLC_CONNECTOR_LVDS: ::libc::c_uint = 8;
pub const WLC_CONNECTOR_COMPONENT: ::libc::c_uint = 9;
pub const WLC_CONNECTOR_DIN: ::libc::c_uint = 10;
pub const WLC_CONNECTOR_DP: ::libc::c_uint = 11;
pub const WLC_CONNECTOR_HDMIA: ::libc::c_uint = 12;
pub const WLC_CONNECTOR_HDMIB: ::libc::c_uint = 13;
pub const WLC_CONNECTOR_TV: ::libc::c_uint = 14;
pub const WLC_CONNECTOR_eDP: ::libc::c_uint = 15;
pub const WLC_CONNECTOR_VIRTUAL: ::libc::c_uint = 16;
pub const WLC_CONNECTOR_DSI: ::libc::c_uint = 17;
pub type Enum_wlc_view_state_bit = ::libc::c_uint;
pub const WLC_BIT_MAXIMIZED: ::libc::c_uint = 1;
pub const WLC_BIT_FULLSCREEN: ::libc::c_uint = 2;
pub const WLC_BIT_RESIZING: ::libc::c_uint = 4;
pub const WLC_BIT_MOVING: ::libc::c_uint = 8;
pub const WLC_BIT_ACTIVATED: ::libc::c_uint = 16;
pub type Enum_wlc_view_type_bit = ::libc::c_uint;
pub const WLC_BIT_OVERRIDE_REDIRECT: ::libc::c_uint = 1;
pub const WLC_BIT_UNMANAGED: ::libc::c_uint = 2;
pub const WLC_BIT_SPLASH: ::libc::c_uint = 4;
pub const WLC_BIT_MODAL: ::libc::c_uint = 8;
pub const WLC_BIT_POPUP: ::libc::c_uint = 16;
pub type Enum_wlc_resize_edge = ::libc::c_uint;
pub const WLC_RESIZE_EDGE_NONE: ::libc::c_uint = 0;
pub const WLC_RESIZE_EDGE_TOP: ::libc::c_uint = 1;
pub const WLC_RESIZE_EDGE_BOTTOM: ::libc::c_uint = 2;
pub const WLC_RESIZE_EDGE_LEFT: ::libc::c_uint = 4;
pub const WLC_RESIZE_EDGE_TOP_LEFT: ::libc::c_uint = 5;
pub const WLC_RESIZE_EDGE_BOTTOM_LEFT: ::libc::c_uint = 6;
pub const WLC_RESIZE_EDGE_RIGHT: ::libc::c_uint = 8;
pub const WLC_RESIZE_EDGE_TOP_RIGHT: ::libc::c_uint = 9;
pub const WLC_RESIZE_EDGE_BOTTOM_RIGHT: ::libc::c_uint = 10;
pub type Enum_wlc_modifier_bit = ::libc::c_uint;
pub const WLC_BIT_MOD_SHIFT: ::libc::c_uint = 1;
pub const WLC_BIT_MOD_CAPS: ::libc::c_uint = 2;
pub const WLC_BIT_MOD_CTRL: ::libc::c_uint = 4;
pub const WLC_BIT_MOD_ALT: ::libc::c_uint = 8;
pub const WLC_BIT_MOD_MOD2: ::libc::c_uint = 16;
pub const WLC_BIT_MOD_MOD3: ::libc::c_uint = 32;
pub const WLC_BIT_MOD_LOGO: ::libc::c_uint = 64;
pub const WLC_BIT_MOD_MOD5: ::libc::c_uint = 128;
pub type Enum_wlc_led_bit = ::libc::c_uint;
pub const WLC_BIT_LED_NUM: ::libc::c_uint = 1;
pub const WLC_BIT_LED_CAPS: ::libc::c_uint = 2;
pub const WLC_BIT_LED_SCROLL: ::libc::c_uint = 4;
pub type Enum_wlc_key_state = ::libc::c_uint;
pub const WLC_KEY_STATE_RELEASED: ::libc::c_uint = 0;
pub const WLC_KEY_STATE_PRESSED: ::libc::c_uint = 1;
pub type Enum_wlc_button_state = ::libc::c_uint;
pub const WLC_BUTTON_STATE_RELEASED: ::libc::c_uint = 0;
pub const WLC_BUTTON_STATE_PRESSED: ::libc::c_uint = 1;
pub type Enum_wlc_scroll_axis_bit = ::libc::c_uint;
pub const WLC_SCROLL_AXIS_VERTICAL: ::libc::c_uint = 1;
pub const WLC_SCROLL_AXIS_HORIZONTAL: ::libc::c_uint = 2;
pub type Enum_wlc_touch_type = ::libc::c_uint;
pub const WLC_TOUCH_DOWN: ::libc::c_uint = 0;
pub const WLC_TOUCH_UP: ::libc::c_uint = 1;
pub const WLC_TOUCH_MOTION: ::libc::c_uint = 2;
pub const WLC_TOUCH_FRAME: ::libc::c_uint = 3;
pub const WLC_TOUCH_CANCEL: ::libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_wlc_modifiers {
    pub leds: uint32_t,
    pub mods: uint32_t,
}
impl ::std::clone::Clone for Struct_wlc_modifiers {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_wlc_modifiers {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_wlc_interface {
    pub output: Struct_Unnamed2,
    pub view: Struct_Unnamed3,
    pub keyboard: Struct_Unnamed5,
    pub pointer: Struct_Unnamed6,
    pub touch: Struct_Unnamed7,
    pub compositor: Struct_Unnamed8,
}
impl ::std::clone::Clone for Struct_wlc_interface {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_wlc_interface {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub created: ::std::option::Option<extern "C" fn(output: wlc_handle)
                                           -> u8>,
    pub destroyed: ::std::option::Option<extern "C" fn(output: wlc_handle)
                                             -> ()>,
    pub focus: ::std::option::Option<extern "C" fn(output: wlc_handle,
                                                   focus: u8) -> ()>,
    pub resolution: ::std::option::Option<extern "C" fn(output: wlc_handle,
                                                        from:
                                                            *const Struct_wlc_size,
                                                        to:
                                                            *const Struct_wlc_size)
                                              -> ()>,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub created: ::std::option::Option<extern "C" fn(view: wlc_handle) -> u8>,
    pub destroyed: ::std::option::Option<extern "C" fn(view: wlc_handle)
                                             -> ()>,
    pub focus: ::std::option::Option<extern "C" fn(view: wlc_handle,
                                                   focus: u8) -> ()>,
    pub move_to_output: ::std::option::Option<extern "C" fn(view: wlc_handle,
                                                            from_output:
                                                                wlc_handle,
                                                            to_output:
                                                                wlc_handle)
                                                  -> ()>,
    pub request: Struct_Unnamed4,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub geometry: ::std::option::Option<extern "C" fn(view: wlc_handle,
                                                      arg1:
                                                          *const Struct_wlc_geometry)
                                            -> ()>,
    pub state: ::std::option::Option<extern "C" fn(view: wlc_handle,
                                                   arg1:
                                                       Enum_wlc_view_state_bit,
                                                   toggle: u8) -> ()>,
    pub _move: ::std::option::Option<extern "C" fn(view: wlc_handle,
                                                   origin:
                                                       *const Struct_wlc_origin)
                                         -> ()>,
    pub resize: ::std::option::Option<extern "C" fn(view: wlc_handle,
                                                    edges: uint32_t,
                                                    origin:
                                                        *const Struct_wlc_origin)
                                          -> ()>,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub key: ::std::option::Option<extern "C" fn(view: wlc_handle,
                                                 time: uint32_t,
                                                 arg1:
                                                     *const Struct_wlc_modifiers,
                                                 key: uint32_t,
                                                 arg2: Enum_wlc_key_state)
                                       -> u8>,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub button: ::std::option::Option<extern "C" fn(view: wlc_handle,
                                                    time: uint32_t,
                                                    arg1:
                                                        *const Struct_wlc_modifiers,
                                                    button: uint32_t,
                                                    arg2:
                                                        Enum_wlc_button_state,
                                                    arg3:
                                                        *const Struct_wlc_origin)
                                          -> u8>,
    pub scroll: ::std::option::Option<extern "C" fn(view: wlc_handle,
                                                    time: uint32_t,
                                                    arg1:
                                                        *const Struct_wlc_modifiers,
                                                    axis_bits: uint8_t,
                                                    amount:
                                                        *mut ::libc::c_double)
                                          -> u8>,
    pub motion: ::std::option::Option<extern "C" fn(view: wlc_handle,
                                                    time: uint32_t,
                                                    arg1:
                                                        *const Struct_wlc_origin)
                                          -> u8>,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub touch: ::std::option::Option<extern "C" fn(view: wlc_handle,
                                                   time: uint32_t,
                                                   arg1:
                                                       *const Struct_wlc_modifiers,
                                                   arg2: Enum_wlc_touch_type,
                                                   slot: int32_t,
                                                   arg3:
                                                       *const Struct_wlc_origin)
                                         -> u8>,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub ready: ::std::option::Option<extern "C" fn() -> ()>,
}
impl ::std::clone::Clone for Struct_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "wlc")]
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
    pub fn strtoimax(__nptr: *const ::libc::c_char,
                     __endptr: *mut *mut ::libc::c_char,
                     __base: ::libc::c_int) -> intmax_t;
    pub fn strtoumax(__nptr: *const ::libc::c_char,
                     __endptr: *mut *mut ::libc::c_char,
                     __base: ::libc::c_int) -> uintmax_t;
    pub fn wcstoimax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t, __base: ::libc::c_int)
     -> intmax_t;
    pub fn wcstoumax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t, __base: ::libc::c_int)
     -> uintmax_t;
    pub fn memcpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                  __n: size_t) -> *mut ::libc::c_void;
    pub fn memmove(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __n: size_t) -> *mut ::libc::c_void;
    pub fn memccpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __c: ::libc::c_int, __n: size_t) -> *mut ::libc::c_void;
    pub fn memset(__s: *mut ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn memcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                  __n: size_t) -> ::libc::c_int;
    pub fn memchr(__s: *const ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn strcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strncmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                   __n: size_t) -> ::libc::c_int;
    pub fn strcoll(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strxfrm(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> size_t;
    pub fn strcoll_l(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                     __l: __locale_t) -> ::libc::c_int;
    pub fn strxfrm_l(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strndup(__string: *const ::libc::c_char, __n: size_t)
     -> *mut ::libc::c_char;
    pub fn strchr(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strrchr(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strcspn(__s: *const ::libc::c_char,
                   __reject: *const ::libc::c_char) -> size_t;
    pub fn strspn(__s: *const ::libc::c_char, __accept: *const ::libc::c_char)
     -> size_t;
    pub fn strpbrk(__s: *const ::libc::c_char,
                   __accept: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strstr(__haystack: *const ::libc::c_char,
                  __needle: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strtok(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __strtok_r(__s: *mut ::libc::c_char,
                      __delim: *const ::libc::c_char,
                      __save_ptr: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strtok_r(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char,
                    __save_ptr: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strlen(__s: *const ::libc::c_char) -> size_t;
    pub fn strnlen(__string: *const ::libc::c_char, __maxlen: size_t)
     -> size_t;
    pub fn strerror(__errnum: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn strerror_r(__errnum: ::libc::c_int, __buf: *mut ::libc::c_char,
                      __buflen: size_t) -> ::libc::c_int;
    pub fn strerror_l(__errnum: ::libc::c_int, __l: __locale_t)
     -> *mut ::libc::c_char;
    pub fn __bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcopy(__src: *const ::libc::c_void, __dest: *mut ::libc::c_void,
                 __n: size_t) -> ();
    pub fn bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                __n: size_t) -> ::libc::c_int;
    pub fn index(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn rindex(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn ffs(__i: ::libc::c_int) -> ::libc::c_int;
    pub fn strcasecmp(__s1: *const ::libc::c_char,
                      __s2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn strncasecmp(__s1: *const ::libc::c_char,
                       __s2: *const ::libc::c_char, __n: size_t)
     -> ::libc::c_int;
    pub fn strsep(__stringp: *mut *mut ::libc::c_char,
                  __delim: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strsignal(__sig: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn __stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __stpncpy(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t)
     -> *mut ::libc::c_char;
    pub fn stpncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn __assert_fail(__assertion: *const ::libc::c_char,
                         __file: *const ::libc::c_char,
                         __line: ::libc::c_uint,
                         __function: *const ::libc::c_char) -> ();
    pub fn __assert_perror_fail(__errnum: ::libc::c_int,
                                __file: *const ::libc::c_char,
                                __line: ::libc::c_uint,
                                __function: *const ::libc::c_char) -> ();
    pub fn __assert(__assertion: *const ::libc::c_char,
                    __file: *const ::libc::c_char, __line: ::libc::c_int)
     -> ();
    pub fn wlc_log_set_handler(cb:
                                   ::std::option::Option<extern "C" fn(_type:
                                                                           Enum_wlc_log_type,
                                                                       str:
                                                                           *const ::libc::c_char)
                                                             -> ()>) -> ();
    pub fn wlc_init(interface: *const Struct_wlc_interface,
                    argc: ::libc::c_int, argv: *mut *mut ::libc::c_char)
     -> u8;
    pub fn wlc_terminate() -> ();
    pub fn wlc_get_backend_type() -> Enum_wlc_backend_type;
    pub fn wlc_exec(bin: *const ::libc::c_char,
                    args: *const *mut ::libc::c_char) -> ();
    pub fn wlc_run() -> ();
    pub fn wlc_handle_set_user_data(handle: wlc_handle,
                                    userdata: *const ::libc::c_void) -> ();
    pub fn wlc_handle_get_user_data(handle: wlc_handle)
     -> *mut ::libc::c_void;
    pub fn wlc_event_loop_add_fd(fd: ::libc::c_int, mask: uint32_t,
                                 cb:
                                     ::std::option::Option<extern "C" fn(fd:
                                                                             ::libc::c_int,
                                                                         mask:
                                                                             uint32_t,
                                                                         arg:
                                                                             *mut ::libc::c_void)
                                                               ->
                                                                   ::libc::c_int>,
                                 arg: *mut ::libc::c_void)
     -> *mut Struct_wlc_event_source;
    pub fn wlc_event_loop_add_timer(cb:
                                        ::std::option::Option<extern "C" fn(arg:
                                                                                *mut ::libc::c_void)
                                                                  ->
                                                                      ::libc::c_int>,
                                    arg: *mut ::libc::c_void)
     -> *mut Struct_wlc_event_source;
    pub fn wlc_event_source_timer_update(source: *mut Struct_wlc_event_source,
                                         ms_delay: int32_t) -> u8;
    pub fn wlc_event_source_remove(source: *mut Struct_wlc_event_source)
     -> ();
    pub fn wlc_get_outputs(out_memb: *mut size_t) -> *const wlc_handle;
    pub fn wlc_get_focused_output() -> wlc_handle;
    pub fn wlc_output_get_name(output: wlc_handle) -> *const ::libc::c_char;
    pub fn wlc_output_get_connector_type(output: wlc_handle)
     -> Enum_wlc_connector_type;
    pub fn wlc_output_get_connector_id(output: wlc_handle) -> uint32_t;
    pub fn wlc_output_get_sleep(output: wlc_handle) -> u8;
    pub fn wlc_output_set_sleep(output: wlc_handle, sleep: u8) -> ();
    pub fn wlc_output_get_resolution(output: wlc_handle)
     -> *const Struct_wlc_size;
    pub fn wlc_output_set_resolution(output: wlc_handle,
                                     resolution: *const Struct_wlc_size)
     -> ();
    pub fn wlc_output_get_mask(output: wlc_handle) -> uint32_t;
    pub fn wlc_output_set_mask(output: wlc_handle, mask: uint32_t) -> ();
    pub fn wlc_output_get_pixels(output: wlc_handle,
                                 pixels:
                                     ::std::option::Option<extern "C" fn(size:
                                                                             *const Struct_wlc_size,
                                                                         rgba:
                                                                             *mut uint8_t,
                                                                         arg:
                                                                             *mut ::libc::c_void)
                                                               -> u8>,
                                 arg: *mut ::libc::c_void) -> ();
    pub fn wlc_output_get_views(output: wlc_handle, out_memb: *mut size_t)
     -> *const wlc_handle;
    pub fn wlc_output_get_mutable_views(output: wlc_handle,
                                        out_memb: *mut size_t)
     -> *mut wlc_handle;
    pub fn wlc_output_set_views(output: wlc_handle, views: *const wlc_handle,
                                memb: size_t) -> u8;
    pub fn wlc_output_focus(output: wlc_handle) -> ();
    pub fn wlc_view_focus(view: wlc_handle) -> ();
    pub fn wlc_view_close(view: wlc_handle) -> ();
    pub fn wlc_view_get_output(view: wlc_handle) -> wlc_handle;
    pub fn wlc_view_set_output(view: wlc_handle, output: wlc_handle) -> ();
    pub fn wlc_view_send_to_back(view: wlc_handle) -> ();
    pub fn wlc_view_send_below(view: wlc_handle, other: wlc_handle) -> ();
    pub fn wlc_view_bring_above(view: wlc_handle, other: wlc_handle) -> ();
    pub fn wlc_view_bring_to_front(view: wlc_handle) -> ();
    pub fn wlc_view_get_mask(view: wlc_handle) -> uint32_t;
    pub fn wlc_view_set_mask(view: wlc_handle, mask: uint32_t) -> ();
    pub fn wlc_view_get_geometry(view: wlc_handle)
     -> *const Struct_wlc_geometry;
    pub fn wlc_view_set_geometry(view: wlc_handle, edges: uint32_t,
                                 geometry: *const Struct_wlc_geometry) -> ();
    pub fn wlc_view_get_type(view: wlc_handle) -> uint32_t;
    pub fn wlc_view_set_type(view: wlc_handle, _type: Enum_wlc_view_type_bit,
                             toggle: u8) -> ();
    pub fn wlc_view_get_state(view: wlc_handle) -> uint32_t;
    pub fn wlc_view_set_state(view: wlc_handle,
                              state: Enum_wlc_view_state_bit, toggle: u8)
     -> ();
    pub fn wlc_view_get_parent(view: wlc_handle) -> wlc_handle;
    pub fn wlc_view_set_parent(view: wlc_handle, parent: wlc_handle) -> ();
    pub fn wlc_view_get_title(view: wlc_handle) -> *const ::libc::c_char;
    pub fn wlc_view_set_title(view: wlc_handle, title: *const ::libc::c_char)
     -> u8;
    pub fn wlc_view_get_class(view: wlc_handle) -> *const ::libc::c_char;
    pub fn wlc_view_set_class(view: wlc_handle, class_: *const ::libc::c_char)
     -> u8;
    pub fn wlc_view_get_app_id(view: wlc_handle) -> *const ::libc::c_char;
    pub fn wlc_view_set_app_id(view: wlc_handle,
                               app_id: *const ::libc::c_char) -> u8;
    pub fn wlc_keyboard_get_xkb_state() -> *mut Struct_xkb_state;
    pub fn wlc_keyboard_get_xkb_keymap() -> *mut Struct_xkb_keymap;
    pub fn wlc_keyboard_get_current_keys(out_memb: *mut size_t)
     -> *const uint32_t;
    pub fn wlc_keyboard_get_keysym_for_key(key: uint32_t,
                                           modifiers:
                                               *const Struct_wlc_modifiers)
     -> uint32_t;
    pub fn wlc_keyboard_get_utf32_for_key(key: uint32_t,
                                          modifiers:
                                              *const Struct_wlc_modifiers)
     -> uint32_t;
    pub fn wlc_input_get_devices(out_memb: *mut size_t)
     -> *const *mut Struct_libinput_device;
}
